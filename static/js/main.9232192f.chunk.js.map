{"version":3,"sources":["DailyForecast.js","ForecastContainer.js","graphics/logo.svg","NavBar.js","App.js","index.js"],"names":["DailyForecast","props","cardDate","Date","dateTime","dayOfWeek","Intl","DateTimeFormat","weekday","month","day","format","Card","Body","Title","Img","src","weatherGraphic","alt","graphicAltText","style","width","condition","highTemp","lowTemp","unique","ForecastContainer","useState","lat","setLat","lng","setLng","status","setStatus","weatherData","setWeatherData","LAGOMORPHA","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","a","weatherAPI","fetch","then","res","json","response","console","log","fetchData","Container","fluid","Row","Col","xl","city","name","country","Spinner","animation","role","className","CardGroup","list","map","data","index","dt","Math","round","temp","max","min","weather","icon","description","main","NavBar","Navbar","bg","variant","Brand","href","logo","height","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9232192f.chunk.js","sourcesContent":["import React from 'react'\nimport Card from 'react-bootstrap/Card'\n\nexport default function DailyForecast(props) {\n\n    let cardDate = new Date(props.dateTime*1000)\n    let dateTimeFormat = new Intl.DateTimeFormat(\"en-US\", {weekday: \"long\", month: \"numeric\", day: \"numeric\"})\n\n    \n    let dayOfWeek = dateTimeFormat.format(cardDate)\n\n    return (\n        <Card \n            \n            key={props.unique}\n        >\n            <Card.Body>\n                <Card.Title>\n                    <h2>{dayOfWeek}</h2>\n                </Card.Title>\n            </Card.Body>\n            <Card.Img \n                src={`https://openweathermap.org/img/wn/${props.weatherGraphic}@2x.png`}\n                alt={props.graphicAltText}\n                style={{width:'110px'}}\n            />\n            <Card.Body><h3>{props.condition}</h3></Card.Body>\n            \n            <Card.Body>High: {props.highTemp} <br></br> Low: {props.lowTemp}</Card.Body>\n        </Card>\n    )\n}\n","import React, { useState, useEffect } from 'react'\n\nimport DailyForecast from './DailyForecast'\nimport { CardGroup, Container, Row, Col, Spinner } from 'react-bootstrap'\n\nexport default function ForecastContainer() {\n    const [lat, setLat] = useState(null)\n    const [lng, setLng] = useState(null)\n    const [status, setStatus] = useState(null)\n\n    const [weatherData, setWeatherData] = useState(null)\n    const LAGOMORPHA = `9371287a98cd312dba80a1bfe6d8661c`\n    \n    const getLocation = () => {\n        if (!navigator.geolocation) {\n            setStatus('Geolocation is not supported by your browser')\n        } else {\n            setStatus('Locating...')\n            navigator.geolocation.getCurrentPosition((position) => {\n                setStatus('Position loaded');\n                setLat(position.coords.latitude)\n                setLng(position.coords.longitude);\n            }, () => {\n                setStatus('Unable to retrieve your location');\n            });\n        }\n    }\n\n    useEffect(() => {\n        getLocation()\n    }, [])\n    //let weatherAPIStatic = `http://api.openweathermap.org/data/2.5/forecast/daily?lat=40.71427&lon=-74.00597&cnt=${5}&appid=${LAGOMORPHA}&units=imperial`\n\n\n\n    \n    useEffect(() => {\n\n\n        const fetchData = async () => {\n            let weatherAPI = `https://api.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lng}&cnt=${5}&appid=${LAGOMORPHA}&units=imperial`\n\n            if (lat && lng) {\n                //console.log(forecastCall)\n                await fetch(weatherAPI)\n                .then((res) => res.json())\n                .then((response) => {\n                    setWeatherData(response)\n                    console.log(response)\n                })\n            }\n        }\n        \n        fetchData()\n     }, [lat, lng, LAGOMORPHA]);\n    \n     console.log(status)\n     console.log(weatherData)\n    return (\n        <>\n            \n            <Container fluid>\n                <br /><br />\n                <Row>\n                    <Col xl={2}></Col>\n                    {(weatherData != null) ? \n                    (<Col xl={6}><h1>Five Day Forecast for {weatherData?.city.name}, {weatherData?.city.country}:</h1></Col> ) : (\n                        <div>\n                            <Spinner xl={6} animation=\"border\" role=\"status\">\n                                \n                                <span className=\"sr-only\">Loading...</span>\n                            </Spinner>\n                            <p>{status}</p>\n                        </div>\n\n                    )}\n                    <Col xl={2}></Col>\n                </Row>\n                <br />\n                \n                <br />\n                <br />\n\n                \n        \n                <Row>\n                    <Col></Col>\n                    <Col xl={8}>\n                    <CardGroup>\n                        {weatherData?.list.map((data, index) => \n                            <> \n                                <DailyForecast \n                                    dateTime={data.dt}\n                                    highTemp={Math.round(data.temp.max)}\n                                    lowTemp={Math.round(data.temp.min)}\n                                    weatherGraphic={data.weather[0].icon}\n                                    graphicAltText={data.weather[0].description}\n                                    condition={data.weather[0].main}\n                                    unique={`${data.dt*.24}-${index}`}\n                                />\n                                <br></br>\n                            </>\n                        )}\n                    </CardGroup>      \n                        \n                    </Col>\n                    <Col></Col>\n            \n                </Row> \n            </Container> \n                \n        </>\n    )\n}\n\n","export default __webpack_public_path__ + \"static/media/logo.0a719f1f.svg\";","import React from 'react'\nimport { Navbar, Form, FormControl, Button } from 'react-bootstrap'\nimport logo from './graphics/logo.svg'\n\nexport default function NavBar() {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\" className=\"justify-content-between\">\n            <Navbar.Brand href=\"#home\">\n                <img\n                    alt=\"\"\n                    src={logo}\n                    width=\"30\"\n                    height=\"30\"\n                    className=\"d-inline-block align-top\"\n                />{' '}\n                Five Day Forecaster by Stephen Peters\n            </Navbar.Brand>\n{/*             <Form inline>\n                <FormControl type=\"text\" placeholder=\"Enter Zip Code\" className=\" mr-sm-2\" />\n                <Button type=\"submit\">Submit</Button>\n            </Form> */}\n        </Navbar>\n    )\n}\n","import ForecastContainer from './ForecastContainer';\nimport NavBar from \"./NavBar\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <NavBar/>\n      <ForecastContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}